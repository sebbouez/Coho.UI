import{_ as s,r as o,o as a,c as i,a as e,b as n,d as l,e as r}from"./app-47cf4121.js";const c={},u=e("h1",{id:"getting-started-with-coho-ui",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getting-started-with-coho-ui","aria-hidden":"true"},"#"),n(" Getting started with Coho.UI")],-1),d={href:"https://www.nuget.org/packages/Coho.UI/",target:"_blank",rel:"noopener noreferrer"},p=r(`<h2 id="define-your-theme" tabindex="-1"><a class="header-anchor" href="#define-your-theme" aria-hidden="true">#</a> Define your theme</h2><blockquote><p>Have a look at the sample application, the file <code>App.xaml</code> contains all the required resources to make it work nicely. Just change the brushes to make it yours.</p></blockquote><p>You must define the Font Family and Font size to use.</p><ul><li><code>FontFamily</code> <strong>AppFont</strong>: Defines the font to use in the UI.</li><li><code>system:Double</code> <strong>AppFontSize</strong>: Defines the font size to use in the UI.</li></ul><p><strong>Example</strong>:</p><div class="language-xaml line-numbers-mode" data-ext="xaml"><pre class="language-xaml"><code>&lt;FontFamily x:Key=&quot;AppFont&quot;&gt;Segoe UI Variable Display,Segoe UI&lt;/FontFamily&gt;
&lt;system:Double x:Key=&quot;AppFontSize&quot;&gt;14&lt;/system:Double&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You must define your color theme using specified resource names.</p><ul><li><code>Color</code> <strong>ChromeBorderActiveColor</strong>: Defines the color of the window border when it is active.</li><li><code>Brush</code> <strong>AccentColor</strong>: Defines the accent color to be used on various UI elements.</li><li><code>Brush</code> <strong>AccentColorDark</strong>: Defines the darker accent color to be used on various UI elements (used for hover state for example).</li><li><code>Brush</code> <strong>AccentColorDarker</strong>: Defines the even darker accent color to be used on various UI elements (used for pressed state for example).</li><li><code>Brush</code> <strong>IconsAccentColor</strong>: Defines the color to be used in Coho.UI bundled isons.</li><li><code>Brush</code> <strong>AccentButtonBorderColor</strong>: Defines the brush to be used for border on buttons that use the <code>PrimaryButton</code> style.</li></ul><p><strong>Example</strong>:</p><div class="language-xaml line-numbers-mode" data-ext="xaml"><pre class="language-xaml"><code>&lt;Color x:Key=&quot;ChromeBorderActiveColor&quot;&gt;#038387&lt;/Color&gt;
&lt;LinearGradientBrush x:Key=&quot;AccentButtonBorderColor&quot; StartPoint=&quot;0,0.9&quot; EndPoint=&quot;0,1&quot;&gt;
   &lt;GradientStop Color=&quot;#038387&quot; Offset=&quot;0&quot; /&gt;
   &lt;GradientStop Color=&quot;#026163&quot; Offset=&quot;1&quot; /&gt;
&lt;/LinearGradientBrush&gt;

&lt;SolidColorBrush x:Key=&quot;AccentColor&quot; Color=&quot;#038387&quot; /&gt;
&lt;SolidColorBrush x:Key=&quot;TitleBarAccentedColor&quot; Color=&quot;#038387&quot; /&gt;
&lt;SolidColorBrush x:Key=&quot;IconsAccentColor&quot; Color=&quot;#038387&quot; /&gt;
&lt;SolidColorBrush x:Key=&quot;AccentColorDark&quot; Color=&quot;#026163&quot; /&gt;
&lt;SolidColorBrush x:Key=&quot;AccentColorDarker&quot; Color=&quot;#024D4F&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configure-the-uicontroller-new-in-v2" tabindex="-1"><a class="header-anchor" href="#configure-the-uicontroller-new-in-v2" aria-hidden="true">#</a> Configure the UIController (NEW in V2)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Example: Register a custom resource file to be used only in Dark mode</span>
    <span class="token comment">// For example, your own implementation of Dark Theme</span>
    UIController<span class="token punctuation">.</span><span class="token function">RegisterThemedMergedResourceName</span><span class="token punctuation">(</span><span class="token string">&quot;/DarkTheme.xaml&quot;</span><span class="token punctuation">,</span> ThemeScheme<span class="token punctuation">.</span>Dark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Example: Register a custom resource file to be used only in Light mode</span>
    <span class="token comment">// For example, your own implementation of Light Theme</span>
    UIController<span class="token punctuation">.</span><span class="token function">RegisterThemedMergedResourceName</span><span class="token punctuation">(</span><span class="token string">&quot;/LightTheme.xaml&quot;</span><span class="token punctuation">,</span> ThemeScheme<span class="token punctuation">.</span>Light<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Example: Register a custom resource file to be loaded in ANY mode (null in argument 2)</span>
    <span class="token comment">// The resource will be reloaded when the user switches the theme to ensure dynamic resources are correct</span>
    UIController<span class="token punctuation">.</span><span class="token function">RegisterThemedMergedResourceName</span><span class="token punctuation">(</span><span class="token string">&quot;/Styles/Icons.xaml&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// This line is important, we want the app to start with Ligth theme</span>
    UIController<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>ThemeScheme<span class="token punctuation">.</span>Light<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function m(h,v){const t=o("ExternalLinkIcon");return a(),i("div",null,[u,e("p",null,[e("a",d,[n("https://www.nuget.org/packages/Coho.UI/"),l(t)])]),p])}const k=s(c,[["render",m],["__file","getstarted.html.vue"]]);export{k as default};
