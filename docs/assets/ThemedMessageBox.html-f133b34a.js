import{_ as e,o as t,c as s,e as n}from"./app-e0605d3e.js";const a={},o=n(`<h1 id="themedmessagebox-dialog" tabindex="-1"><a class="header-anchor" href="#themedmessagebox-dialog" aria-hidden="true">#</a> ThemedMessageBox dialog</h1><p>The <code>ThemedMessageBox</code> is a dialog that replaces the default <code>MessageBox</code> using the current theme.</p><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><p>None.</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="static-messageboxresult-show-string-message-string-title-messageboxbutton-button" tabindex="-1"><a class="header-anchor" href="#static-messageboxresult-show-string-message-string-title-messageboxbutton-button" aria-hidden="true">#</a> static MessageBoxResult Show(string message, string title, MessageBoxButton button)</h3><p>Shows a modal dialog using the current theme. Returns a <code>MessageBoxResult</code> that represents the choice of the user.</p><h4 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h4><ul><li><code>string</code> message : The message to display</li><li><code>string</code> title : The title of the dialog</li><li><code>MessageBoxButton</code> button : The buttons to display</li></ul><h3 id="static-messageboxresult-show-string-message-string-title-messageboxbutton-button-string-defaultbuttontext-string-secondarybuttontext" tabindex="-1"><a class="header-anchor" href="#static-messageboxresult-show-string-message-string-title-messageboxbutton-button-string-defaultbuttontext-string-secondarybuttontext" aria-hidden="true">#</a> static MessageBoxResult Show(string message, string title, MessageBoxButton button, string defaultButtonText, string secondaryButtonText)</h3><p>Shows a modal dialog using the current theme. Returns a <code>MessageBoxResult</code> that represents the choice of the user.<br> This method can be used to override the default texts and provide a better UX while still using the default framework components.<br> This method should be used with the <code>MessageBoxButton.YesNoCancel</code> or <code>MessageBoxButton.YesNo</code> arguments. The <strong>Yes</strong> button will be replaced with the <strong>defaultButtonText</strong> value, and the <strong>No</strong> button will be replaced with the <strong>secondaryButtonText</strong>.</p><h4 id="arguments-1" tabindex="-1"><a class="header-anchor" href="#arguments-1" aria-hidden="true">#</a> Arguments</h4><ul><li><code>string</code> message : The message to display</li><li><code>string</code> title : The title of the dialog</li><li><code>MessageBoxButton</code> : The buttons to display</li><li><code>string</code> defaultButtonText : The text to display in the default button (the <strong>Yes</strong> button when using <code>MessageBoxButton.YesNoCancel</code> or <code>MessageBoxButton.YesNo</code>)</li><li><code>string</code> secondaryButtonText : The text to in the the secondary button (the <strong>No</strong> button when using <code>MessageBoxButton.YesNoCancel</code> or <code>MessageBoxButton.YesNo</code>)</li></ul><h3 id="static-messageboxresult-show-string-message-string-title-window-owner-messageboxbutton-button-string-defaultbuttontext-null-string-secondarybuttontext-null" tabindex="-1"><a class="header-anchor" href="#static-messageboxresult-show-string-message-string-title-window-owner-messageboxbutton-button-string-defaultbuttontext-null-string-secondarybuttontext-null" aria-hidden="true">#</a> static MessageBoxResult Show(string message, string title, Window owner, MessageBoxButton button, string? defaultButtonText = null, string? secondaryButtonText = null)</h3><p>Shows a modal dialog using the current theme. Returns a <code>MessageBoxResult</code> that represents the choice of the user.<br> This method can be used to override the default texts and provide a better UX while still using the default framework components.<br> This method should be used with the <code>MessageBoxButton.YesNoCancel</code> or <code>MessageBoxButton.YesNo</code> arguments. The <strong>Yes</strong> button will be replaced with the <strong>defaultButtonText</strong> value, and the <strong>No</strong> button will be replaced with the <strong>secondaryButtonText</strong>.</p><h4 id="arguments-2" tabindex="-1"><a class="header-anchor" href="#arguments-2" aria-hidden="true">#</a> Arguments</h4><ul><li><code>string</code> message : The message to display</li><li><code>Window</code> owner: The Window that will own the dialog</li><li><code>string</code> title : The title of the dialog</li><li><code>MessageBoxButton</code> : The buttons to display</li><li><code>string</code> defaultButtonText : The text to display in the default button (the <strong>Yes</strong> button when using <code>MessageBoxButton.YesNoCancel</code> or <code>MessageBoxButton.YesNo</code>)</li><li><code>string</code> secondaryButtonText : The text to in the the secondary button (the <strong>No</strong> button when using <code>MessageBoxButton.YesNoCancel</code> or <code>MessageBoxButton.YesNo</code>)</li></ul><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>None.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1</h3><p>This example shows how to use the <code>ThemedMessageBox</code> from C# and handle the result.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MessageBoxResult</span> quest <span class="token operator">=</span> ThemedMessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;Do you want to save changes?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Save changes&quot;</span><span class="token punctuation">,</span> MessageBoxButton<span class="token punctuation">.</span>YesNoCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>quest<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> MessageBoxResult<span class="token punctuation">.</span>Yes<span class="token punctuation">:</span>
        <span class="token comment">// Yes button was clicked</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MessageBoxResult<span class="token punctuation">.</span>No<span class="token punctuation">:</span>
        <span class="token comment">// No button was clicked</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MessageBoxResult<span class="token punctuation">.</span>Cancel<span class="token punctuation">:</span>
        <span class="token comment">// Cancel button was clicked</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),i=[o];function d(r,l){return t(),s("div",null,i)}const u=e(a,[["render",d],["__file","ThemedMessageBox.html.vue"]]);export{u as default};
